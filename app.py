# app.py
import streamlit as st
import pandas as pd
import requests
import yfinance as yf
from pandas_datareader import data as pdr  # Stooq fallback
from datetime import datetime
import pytz
import time

# ---------------------------
# Í∏∞Î≥∏ ÏÑ§Ï†ï
# ---------------------------
KST = pytz.timezone("Asia/Seoul")
st.set_page_config(page_title="Ìà¨Ïûê ÎπÑÍµê ÎåÄÏãúÎ≥¥Îìú (O¬∑ÏòàÏ†ÅÍ∏à¬∑BTC/ETH)", layout="wide")
st.title("üìä Ìà¨Ïûê ÎπÑÍµê ÎåÄÏãúÎ≥¥Îìú: Î¶¨ÏñºÌã∞Ïù∏Ïª¥ ¬∑ Ïòà¬∑Ï†ÅÍ∏à ¬∑ BTC/ETH (Finlife API Î≤ÑÏ†Ñ)")
st.caption("KRW Í∏∞Ï§Ä ÎπÑÍµê. ÌôòÏú®/ÏàòÏàòÎ£å Ï†ÅÏö©¬∑ÎØ∏Ï†ÅÏö©ÏùÑ Î∂ÑÎ¶¨Ìï¥ Í≥ÑÏÇ∞Ìï©ÎãàÎã§. Ïòà¬∑Ï†ÅÍ∏à Îç∞Ïù¥ÌÑ∞Îäî Í∏àÏúµÍ∞êÎèÖÏõê Finlife Í≥µÏãù APIÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.")

# ---------------------------
# Ïú†Ìã∏: Í∞ÑÎã® Ïû¨ÏãúÎèÑ
# ---------------------------
def _retry(times, delay, func, *args, **kwargs):
    last_err = None
    for _ in range(times):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            last_err = e
            time.sleep(delay)
    if last_err:
        raise last_err

# ---------------------------
# ÌôòÏú® (Frankfurter, Ïã§Ìå® Ïãú Í∏∞Î≥∏Í∞í)
# ---------------------------
@st.cache_data(ttl=300)
def get_usdkrw():
    try:
        r = requests.get("https://api.frankfurter.app/latest?from=USD&to=KRW", timeout=15)
        r.raise_for_status()
        data = r.json()
        rate = float(data["rates"]["KRW"])
        ts = data.get("date", datetime.now().strftime("%Y-%m-%d"))
        return rate, ts
    except Exception:
        st.warning("ÌôòÏú® API Ïò§Î•ò: Í∏∞Î≥∏Í∞í 1350.0 ÏÇ¨Ïö© (ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú ÏàòÏ†ï Í∞ÄÎä•)")
        return 1350.0, datetime.now().strftime("%Y-%m-%d")

# ---------------------------
# yfinance Î∞∞Îãπ Î≥¥Í∞ï: 2Í≤ΩÎ°ú + Ïû¨ÏãúÎèÑ
# ---------------------------
@st.cache_data(ttl=900)
def _get_last_monthly_dividend_yf_robust(ticker: str):
    """
    yfinance Î∞∞Îãπ ÏãúÎèÑ:
      1) Ticker.dividends
      2) yf.download(..., actions=True)["Dividends"] ÏµúÍ∑º ÏñëÏàòÍ∞í
    ÏÑ±Í≥µ Ïãú (value, "source"), Ïã§Ìå® Ïãú (None, "reason1 | reason2")
    """
    # path1: Ticker.dividends
    try:
        def _path1():
            t = yf.Ticker(ticker)
            s = t.dividends
            if s is not None and len(s) > 0:
                v = float(s.iloc[-1])
                if v > 0:
                    return v
            raise ValueError("empty dividends via Ticker.dividends")
        v1 = _retry(2, 0.8, _path1)
        return v1, "from Ticker.dividends"
    except Exception as e1:
        reason1 = f"dividends path1 fail: {e1}"

    # path2: download(actions=True)
    try:
        def _path2():
            df = yf.download(
                ticker,
                period="2y",
                interval="1d",
                auto_adjust=False,
                actions=True,
                progress=False,
                threads=False,
            )
            if isinstance(df, pd.DataFrame) and "Dividends" in df.columns:
                nonzero = df["Dividends"][df["Dividends"] > 0]
                if not nonzero.empty:
                    return float(nonzero.iloc[-1])
            raise ValueError("empty dividends via download(actions=True)")
        v2 = _retry(2, 0.8, _path2)
        return v2, "from download(actions=True)"
    except Exception as e2:
        reason2 = f"dividends path2 fail: {e2}"

    return None, f"{reason1} | {reason2}"

# ---------------------------
# Î¶¨ÏñºÌã∞Ïù∏Ïª¥ Í∞ÄÍ≤©/Î∞∞Îãπ (yfinance ‚Üí Stooq Ìè¥Î∞±)
# ---------------------------
@st.cache_data(ttl=900)
def get_realty_income_price_div(ticker="O"):
    """
    Í∞ÄÍ≤©: yfinance ‚Üí Ïã§Ìå® Ïãú Stooq(o.us)
    Î∞∞Îãπ: yfinance 2Í≤ΩÎ°ú Î≥¥Í∞ï
    """
    price_usd, price_date = None, None

    # Í∞ÄÍ≤©: yfinance
    try:
        t = yf.Ticker(ticker)
        hist = t.history(period="3mo", interval="1d", auto_adjust=False)
        if not hist.empty:
            price_usd = float(hist["Close"].iloc[-1])
            try:
                price_date = hist.index[-1].tz_localize("UTC").astimezone(KST).strftime("%Y-%m-%d")
            except Exception:
                price_date = str(hist.index[-1].date())
    except Exception:
        pass

    # Í∞ÄÍ≤©: Stooq Ìè¥Î∞±
    if price_usd is None:
        try:
            stooq = pdr.DataReader("o.us", "stooq").sort_index()
            if not stooq.empty:
                price_usd = float(stooq["Close"].iloc[-1])
                price_date = str(stooq.index[-1].date())
        except Exception:
            pass

    # Î∞∞Îãπ: Î≥¥Í∞ï Ìï®Ïàò
    last_monthly_div, div_source = _get_last_monthly_dividend_yf_robust(ticker)

    return price_usd, price_date, last_monthly_div, div_source

# ---------------------------
# ÏóÖÎπÑÌä∏ ÏùºÎ¥â
# ---------------------------
@st.cache_data(ttl=300)
def get_upbit_daily(market="KRW-BTC", count=8):
    try:
        url = "https://api.upbit.com/v1/candles/days"
        res = requests.get(url, params={"market": market, "count": count}, timeout=15)
        res.raise_for_status()
        data = res.json()
        closes = [d["trade_price"] for d in reversed(data)]
        dates = [d["candle_date_time_kst"][:10] for d in reversed(data)]
        return pd.DataFrame({"date": dates, "close": closes})
    except Exception:
        return pd.DataFrame(columns=["date","close"])

def pct_change_over(df: pd.DataFrame, days: int):
    if df is None or df.empty or len(df) <= days:
        return None
    now = df["close"].iloc[-1]
    past = df["close"].iloc[-1 - days]
    return (now - past) / past * 100.0

# ---------------------------
# Finlife (Í∏àÏúµÏÉÅÌíà ÌïúÎààÏóê) Í≥µÏãù API
# ---------------------------
FINLIFE_BASE = "https://finlife.fss.or.kr/finlifeapi"
TOP_BANKS = "020000"  # ÏùÄÌñâ(Ï†ú1Í∏àÏúµÍ∂å)

@st.cache_data(ttl=600)
def finlife_fetch(api_key: str, endpoint: str, page_no: int = 1):
    """
    endpoint: 'depositProductsSearch.json' or 'savingProductsSearch.json'
    """
    if not api_key:
        return {}
    url = f"{FINLIFE_BASE}/{endpoint}"
    params = {"auth": api_key, "topFinGrpNo": TOP_BANKS, "pageNo": page_no}
    r = requests.get(url, params=params, timeout=20)
    r.raise_for_status()
    return r.json()

def _filter_options(df_opt: pd.DataFrame, *, save_trm: int = 12, intr_rate_type: str = "S", rsrv_type: str | None = None):
    """
    save_trm: ÎßåÍ∏∞(Í∞úÏõî), e.g., 12
    intr_rate_type: 'S'(Îã®Î¶¨) or 'M'(Î≥µÎ¶¨)
    rsrv_type (Ï†ÅÍ∏àÎßå): 'F'(ÏûêÏú†Ï†ÅÎ¶ΩÏãù) or 'S'(Ï†ïÏï°Ï†ÅÎ¶ΩÏãù)
    """
    if df_opt is None or df_opt.empty:
        return df_opt
    out = df_opt.copy()
    # Ïà´ÏûêÌôî
    for c in ["save_trm", "intr_rate", "intr_rate2"]:
        if c in out.columns:
            out[c] = pd.to_numeric(out[c], errors="coerce")
    # ÌïÑÌÑ∞
    out = out[(out.get("save_trm") == save_trm) & (out.get("intr_rate_type") == intr_rate_type)]
    if rsrv_type is not None and "rsrv_type" in out.columns:
        out = out[out["rsrv_type"] == rsrv_type]
    return out

def _merge_base_option(base: pd.DataFrame, opt: pd.DataFrame, *, sort_by: str, top_n: int = 5):
    """
    base: baseList (ÏÉÅÌíà Í∏∞Î≥∏Ï†ïÎ≥¥)
    opt:  optionList (Í∏àÎ¶¨ ÏòµÏÖò: intr_rate(Í∏∞Î≥∏), intr_rate2(Ïö∞ÎåÄ))
    sort_by: 'intr_rate' or 'intr_rate2'
    """
    if base is None or base.empty or opt is None or opt.empty:
        return pd.DataFrame()

    # Í∞ôÏùÄ ÏÉÅÌíà(fin_prdt_cd) ÎÇ¥ ÏµúÎåÄÍ∞í ÏßëÍ≥Ñ
    best = (
        opt.groupby("fin_prdt_cd")[[c for c in ["intr_rate", "intr_rate2"] if c in opt.columns]]
           .max()
           .reset_index()
    )
    merged = base.merge(best, on="fin_prdt_cd", how="inner")

    # Ï†ïÎ†¨
    if sort_by in merged.columns:
        merged = merged.sort_values(sort_by, ascending=False)
    else:
        return pd.DataFrame()

    # Ìëú Ïª¨Îüº
    out = pd.DataFrame()
    out["ÏùÄÌñâ"] = merged.get("kor_co_nm", "")
    out["ÏÉÅÌíàÎ™Ö"] = merged.get("fin_prdt_nm", "")
    if "intr_rate" in merged.columns:
        out["Í∏∞Î≥∏Í∏àÎ¶¨(%)"] = merged["intr_rate"].round(3)
    if "intr_rate2" in merged.columns:
        out["ÏµúÍ≥†Ïö∞ÎåÄ(%)"] = merged["intr_rate2"].round(3)
    return out.head(top_n).reset_index(drop=True)

@st.cache_data(ttl=600)
def finlife_top5_deposit(api_key: str):
    """
    Ï†ïÍ∏∞ÏòàÍ∏à:
    - topFinGrpNo=020000(ÏùÄÌñâ)
    - ÏòµÏÖò: Îã®Î¶¨(S), 12Í∞úÏõî
    - Ï†ïÎ†¨: Í∏∞Î≥∏Í∏àÎ¶¨(%) ÎÇ¥Î¶ºÏ∞®Ïàú
    """
    try:
        js = finlife_fetch(api_key, "depositProductsSearch.json", 1)
        base = pd.DataFrame(js.get("result", {}).get("baseList", []))
        opt  = pd.DataFrame(js.get("result", {}).get("optionList", []))
        if base.empty or opt.empty:
            return pd.DataFrame()
        opt_f = _filter_options(opt, save_trm=12, intr_rate_type="S")
        if opt_f.empty:
            return pd.DataFrame()
        out = _merge_base_option(base, opt_f, sort_by="intr_rate", top_n=5)
        return out
    except Exception as e:
        st.error(f"Finlife ÏòàÍ∏à API Ïò§Î•ò: {e}")
        return pd.DataFrame()

# ---------------------------
# Ï†ÅÍ∏à Top5 ÌòºÌï© ÏÑ†Ï†ï: Í∏∞Î≥∏Top1 + Ïö∞ÎåÄTop1 + Ï¢ÖÌï©Top3(Ï§ëÎ≥µ Ï†úÏô∏)
# ---------------------------
@st.cache_data(ttl=600)
def finlife_saving_top5_mixed(api_key: str, principal_krw: float):
    """
    Ï†ÅÍ∏à Top5 Íµ¨ÏÑ±:
      1) Í∏∞Î≥∏Í∏àÎ¶¨(%) Top 1
      2) ÏµúÍ≥†Ïö∞ÎåÄ(%) Top 1
      3) Ï¢ÖÌï© Top 3  (Ï¢ÖÌï©Í∏àÎ¶¨ = (Í∏∞Î≥∏Í∏àÎ¶¨ + ÏµúÍ≥†Ïö∞ÎåÄ) / 2; Îëò Ï§ë ÌïòÎÇòÎßå ÏûàÏúºÎ©¥ Í∑∏ Í∞í)
    ÏïûÏÑ† ÏÑ†Ï†ïÍ≥º 'Ï§ëÎ≥µ ÏóÜÏù¥' Ï¥ù 5Í∞úÎ°ú Íµ¨ÏÑ±.
    Í∞Å ÌñâÏùò 'Í∏∞Ï§ÄÍ∏àÎ¶¨(%)'Î°ú Ïó∞Ïù¥Ïûê(Ïõê, Îã®Î¶¨) Í≥ÑÏÇ∞ÌïòÏó¨ ÌëúÏãú.
    """
    try:
        if not api_key:
            return pd.DataFrame()

        js = finlife_fetch(api_key, "savingProductsSearch.json", 1)
        base = pd.DataFrame(js.get("result", {}).get("baseList", []))
        opt  = pd.DataFrame(js.get("result", {}).get("optionList", []))
        if base.empty or opt.empty:
            return pd.DataFrame()

        # ÏòµÏÖò ÌïÑÌÑ∞: ÏûêÏú†Ï†ÅÎ¶ΩÏãù(F), Îã®Î¶¨(S), 12Í∞úÏõî
        opt_f = _filter_options(opt, save_trm=12, intr_rate_type="S", rsrv_type="F")
        if opt_f.empty:
            return pd.DataFrame()

        # Ïà´ÏûêÌôî
        opt_f["intr_rate"]  = pd.to_numeric(opt_f["intr_rate"], errors="coerce")
        opt_f["intr_rate2"] = pd.to_numeric(opt_f["intr_rate2"], errors="coerce")

        # ÏÉÅÌíàÎ≥Ñ ÏµúÎåÄÍ∞í
        best = (
            opt_f.groupby("fin_prdt_cd")[["intr_rate", "intr_rate2"]]
                .max()
                .reset_index()
        )
        merged = base.merge(best, on="fin_prdt_cd", how="inner")
        if merged.empty:
            return pd.DataFrame()

        # Ïª¨Îüº Ï†ïÎ¶¨
        merged["base_rate"] = pd.to_numeric(merged["intr_rate"], errors="coerce")
        merged["pref_rate"] = pd.to_numeric(merged["intr_rate2"], errors="coerce")

        # Îëò Îã§ NaNÏù¥Î©¥ Ï†úÏô∏
        merged = merged[~(merged["base_rate"].isna() & merged["pref_rate"].isna())].copy()

        # Ï¢ÖÌï©(ÌèâÍ∑†) Í∏àÎ¶¨
        merged["combined_rate"] = merged[["base_rate", "pref_rate"]].mean(axis=1, skipna=True)

        # Î∑∞Ïö© DF
        df = pd.DataFrame({
            "ÏùÄÌñâ": merged["kor_co_nm"],
            "ÏÉÅÌíàÎ™Ö": merged["fin_prdt_nm"],
            "Í∏∞Î≥∏Í∏àÎ¶¨(%)": merged["base_rate"].round(3),
            "ÏµúÍ≥†Ïö∞ÎåÄ(%)": merged["pref_rate"].round(3),
            "Ï¢ÖÌï©(ÌèâÍ∑†)(%)": merged["combined_rate"].round(3),
            "ÏÉÅÌíàÏΩîÎìú": merged["fin_prdt_cd"],
        })

        # Í∏∞Î≥∏ Top1
        base_ranked = df.dropna(subset=["Í∏∞Î≥∏Í∏àÎ¶¨(%)"]).sort_values("Í∏∞Î≥∏Í∏àÎ¶¨(%)", ascending=False)
        pick_base = base_ranked.head(1).copy()

        # Ïö∞ÎåÄ Top1 (Ï§ëÎ≥µ Ï†úÏô∏)
        pref_ranked = df.dropna(subset=["ÏµúÍ≥†Ïö∞ÎåÄ(%)"]).sort_values("ÏµúÍ≥†Ïö∞ÎåÄ(%)", ascending=False)
        pref_ranked = pref_ranked[~pref_ranked["ÏÉÅÌíàÏΩîÎìú"].isin(pick_base["ÏÉÅÌíàÏΩîÎìú"])]
        pick_pref = pref_ranked.head(1).copy()

        # Ï¢ÖÌï© Top3 (Ï§ëÎ≥µ Ï†úÏô∏)
        combined_ranked = df.dropna(subset=["Ï¢ÖÌï©(ÌèâÍ∑†)(%)"]).sort_values("Ï¢ÖÌï©(ÌèâÍ∑†)(%)", ascending=False)
        combined_ranked = combined_ranked[~combined_ranked["ÏÉÅÌíàÏΩîÎìú"].isin(pd.concat([pick_base["ÏÉÅÌíàÏΩîÎìú"], pick_pref["ÏÉÅÌíàÏΩîÎìú"]]))]
        pick_combined = combined_ranked.head(3).copy()

        out = pd.concat([pick_base, pick_pref, pick_combined], ignore_index=True)

        # ÏÑ†Ï†ïÍ∏∞Ï§Ä & Í∏∞Ï§ÄÍ∏àÎ¶¨
        def basis_and_rate(row):
            if row["ÏÉÅÌíàÏΩîÎìú"] in pick_base["ÏÉÅÌíàÏΩîÎìú"].values:
                return "Í∏∞Î≥∏Í∏àÎ¶¨ Top1", row["Í∏∞Î≥∏Í∏àÎ¶¨(%)"]
            if row["ÏÉÅÌíàÏΩîÎìú"] in pick_pref["ÏÉÅÌíàÏΩîÎìú"].values:
                return "ÏµúÍ≥†Ïö∞ÎåÄ Top1", row["ÏµúÍ≥†Ïö∞ÎåÄ(%)"]
            return "Ï¢ÖÌï© Top", row["Ï¢ÖÌï©(ÌèâÍ∑†)(%)"]

        basis_list, basis_rate = [], []
        for _, r in out.iterrows():
            b, rate = basis_and_rate(r)
            basis_list.append(b)
            basis_rate.append(rate)

        out["ÏÑ†Ï†ïÍ∏∞Ï§Ä"] = basis_list
        out["Í∏∞Ï§ÄÍ∏àÎ¶¨(%)"] = basis_rate

        # Ïó∞Ïù¥Ïûê(Ïõê, Îã®Î¶¨) = Í∏∞Ï§ÄÍ∏àÎ¶¨ ÏÇ¨Ïö©
        out["Ïó∞Ïù¥Ïûê(Ïõê, Îã®Î¶¨)"] = (
            principal_krw * (pd.to_numeric(out["Í∏∞Ï§ÄÍ∏àÎ¶¨(%)"], errors="coerce") / 100.0)
        ).round(0).astype("Int64")

        # Î≥¥Í∏∞ Ï¢ãÏùÄ Ï†ïÎ†¨
        rank_order = {"Í∏∞Î≥∏Í∏àÎ¶¨ Top1": 0, "ÏµúÍ≥†Ïö∞ÎåÄ Top1": 1, "Ï¢ÖÌï© Top": 2}
        out["_ord"] = out["ÏÑ†Ï†ïÍ∏∞Ï§Ä"].map(rank_order).fillna(3)
        out = out.sort_values(["_ord", "Í∏∞Ï§ÄÍ∏àÎ¶¨(%)"], ascending=[True, False]).drop(columns=["_ord"])

        # ÏµúÏ¢Ö Ïª¨Îüº ÏàúÏÑú
        out = out[["ÏùÄÌñâ", "ÏÉÅÌíàÎ™Ö", "ÏÑ†Ï†ïÍ∏∞Ï§Ä", "Í∏∞Ï§ÄÍ∏àÎ¶¨(%)", "Í∏∞Î≥∏Í∏àÎ¶¨(%)", "ÏµúÍ≥†Ïö∞ÎåÄ(%)", "Ï¢ÖÌï©(ÌèâÍ∑†)(%)", "Ïó∞Ïù¥Ïûê(Ïõê, Îã®Î¶¨)"]]
        return out.reset_index(drop=True)

    except Exception as e:
        st.error(f"Finlife Ï†ÅÍ∏à ÌòºÌï© Îû≠ÌÇπ ÏÉùÏÑ± Ï§ë Ïò§Î•ò: {e}")
        return pd.DataFrame()

def add_simple_interest_krw(df: pd.DataFrame, principal_krw: float, rate_col: str):
    if df is None or df.empty or rate_col not in df.columns:
        return df
    out = df.copy()
    out["Ïó∞Ïù¥Ïûê(Ïõê, Îã®Î¶¨)"] = (principal_krw * (pd.to_numeric(out[rate_col], errors="coerce")/100.0)).round(0).astype("Int64")
    return out

# ---------------------------
# ÏÇ¨Ïù¥ÎìúÎ∞î (ÏòµÏÖò)
# ---------------------------
with st.sidebar:
    st.header("‚öôÔ∏è ÏòµÏÖò")
    base_amt_krw = st.number_input("Í∏∞Ï§Ä Í∏àÏï° (KRW)", min_value=10_000, step=10_000, value=5_000_000)
    apply_fx = st.checkbox("ÌôòÏú® Ï†ÅÏö©", True)
    apply_fees = st.checkbox("ÏàòÏàòÎ£å Ï†ÅÏö©", True)

    st.markdown("---")
    st.subheader("ÌôòÏú® (USD‚ÜíKRW)")
    api_rate, api_date = get_usdkrw()
    usdkrw = st.number_input("USD/KRW ÌôòÏú® (ÏàòÎèô Ï°∞Ï†ï Í∞ÄÎä•)", min_value=500.0, max_value=3000.0, value=float(api_rate), step=0.5, help=f"API Í∏∞Ï§ÄÏùº: {api_date}")

    st.markdown("---")
    st.subheader("Í±∞Îûò ÏàòÏàòÎ£å (Ìé∏Ïßë Í∞ÄÎä•)")
    upbit_fee_spot = st.number_input("ÏóÖÎπÑÌä∏ KRW ÎßàÏºì ÏàòÏàòÎ£å (ÏùºÎ∞ò, %)", min_value=0.0, max_value=1.0, value=0.05, step=0.001)
    upbit_fee_reserved = st.number_input("ÏóÖÎπÑÌä∏ KRW ÎßàÏºì ÏàòÏàòÎ£å (ÏòàÏïΩ, %)", min_value=0.0, max_value=1.0, value=0.139, step=0.001)
    mirae_us_fee = st.number_input("ÎØ∏ÎûòÏóêÏÖã ÎØ∏Íµ≠Ï£ºÏãù Ïò®ÎùºÏù∏ ÏàòÏàòÎ£å (%)", min_value=0.0, max_value=1.0, value=0.25, step=0.01)

    # Î¶¨ÏñºÌã∞Ïù∏Ïª¥ Î∞∞Îãπ(ÏàòÎèô ÏûÖÎ†•)
    st.markdown("---")
    st.subheader("Î¶¨ÏñºÌã∞Ïù∏Ïª¥ Î∞∞Îãπ(ÏàòÎèô ÏûÖÎ†• ÏòµÏÖò)")
    monthly_div_override = st.number_input(
        "ÏõîÎ∞∞Îãπ (USD/Ï£º, ÏàòÎèô ÏûÖÎ†•)",
        min_value=0.0, value=0.0, step=0.001,
        help="yfinanceÎ°ú Î∞∞ÎãπÏùÑ Î™ª Í∞ÄÏ†∏Ïò¨ Îïå ÏÇ¨Ïö©. 0Ïù¥Î©¥ ÏûêÎèô Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©"
    )

    st.markdown("---")
    st.subheader("Finlife Ïò§Ìîà API ÌÇ§")
    # secretsÍ∞Ä ÏóÜÏùÑ Îïå ÏóêÎü¨ Î∞©ÏßÄ
    try:
        finlife_key = st.secrets["FINLIFE_API_KEY"]
    except Exception:
        finlife_key = None
    finlife_key = finlife_key or st.sidebar.text_input("API Key", type="password")

# ---------------------------
# 1) Î¶¨ÏñºÌã∞Ïù∏Ïª¥ (O): Ï¢ÖÍ∞Ä¬∑Î∞∞Îãπ¬∑ÏàòÏàòÎ£å + KRW ÌôòÏÇ∞
# ---------------------------
st.header("1) Î¶¨ÏñºÌã∞Ïù∏Ïª¥ (O): Ï¢ÖÍ∞Ä¬∑Î∞∞Îãπ¬∑ÏàòÏàòÎ£å")

price_usd, price_date, last_monthly_div, div_source = get_realty_income_price_div("O")
c1, c2, c3 = st.columns([1.1,1.6,1.1])

with c1:
    if price_usd:
        st.metric("ÏµúÍ∑º Ï¢ÖÍ∞Ä (USD)", f"${price_usd:,.2f}", help=f"ÎßàÏßÄÎßâ Í±∞ÎûòÏùº: {price_date}")
        show_price = price_usd * (usdkrw if apply_fx else 1.0)
        st.metric(f"ÏµúÍ∑º Ï¢ÖÍ∞Ä ({'KRW' if apply_fx else 'USD'})", (f"{show_price:,.0f} Ïõê" if apply_fx else f"${price_usd:,.2f}"))
    else:
        st.error("Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§. (yfinance/Stooq)")

with c2:
    # Î∞∞Îãπ: ÏûêÎèô(robust) ‚Üí ÏóÜÏúºÎ©¥ ÏàòÎèô ÏûÖÎ†•
    monthly_div_usd_auto = last_monthly_div if (last_monthly_div is not None and last_monthly_div > 0) else None
    monthly_div_usd = monthly_div_usd_auto if monthly_div_usd_auto is not None else (monthly_div_override if monthly_div_override > 0 else 0.0)
    annual_div_usd = monthly_div_usd * 12

    if price_usd:
        buy_fee = (mirae_us_fee/100.0) if apply_fees else 0.0
        usd_budget = (base_amt_krw / (usdkrw if apply_fx else 1.0))
        shares_no_fee = usd_budget / price_usd
        shares_fee    = usd_budget * (1 - buy_fee) / price_usd

        # USD Í∏∞Ï§Ä Î∞∞Îãπ
        m_div_usd_no_fee = shares_no_fee * monthly_div_usd
        y_div_usd_no_fee = m_div_usd_no_fee * 12
        m_div_usd_fee    = shares_fee * monthly_div_usd
        y_div_usd_fee    = m_div_usd_fee * 12

        # KRW ÌôòÏÇ∞
        fx = (usdkrw if apply_fx else 1.0)
        m_div_krw_no_fee = m_div_usd_no_fee * fx
        y_div_krw_no_fee = y_div_usd_no_fee * fx
        m_div_krw_fee    = m_div_usd_fee * fx
        y_div_krw_fee    = y_div_usd_fee * fx

        st.write("**Îß§Ïàò Í∞ÄÎä• Ï£ºÏãù Ïàò(Í∏∞Ï§Ä Í∏àÏï° Í∏∞Ï§Ä)**")
        st.write(f"- ÏàòÏàòÎ£å ÎØ∏Ï†ÅÏö©: **{shares_no_fee:.4f}Ï£º**")
        st.write(f"- ÏàòÏàòÎ£å Ï†ÅÏö©(Îß§Ïàò {mirae_us_fee:.2f}%): **{shares_fee:.4f}Ï£º**")

        if monthly_div_usd > 0:
            st.write("**Î∞∞Îãπ (USD ‚Üí KRW ÌôòÏÇ∞)**")
            st.write(f"- ÏõîÎ∞∞Îãπ(ÎØ∏Ï†ÅÏö©): **${m_div_usd_no_fee:,.2f} ‚Üí {m_div_krw_no_fee:,.0f}Ïõê**")
            st.write(f"- Ïó∞Î∞∞Îãπ(ÎØ∏Ï†ÅÏö©): **${y_div_usd_no_fee:,.2f} ‚Üí {y_div_krw_no_fee:,.0f}Ïõê**")
            st.write(f"- ÏõîÎ∞∞Îãπ(ÏàòÏàòÎ£å Ï†ÅÏö©): **${m_div_usd_fee:,.2f} ‚Üí {m_div_krw_fee:,.0f}Ïõê**")
            st.write(f"- Ïó∞Î∞∞Îãπ(ÏàòÏàòÎ£å Ï†ÅÏö©): **${y_div_usd_fee:,.2f} ‚Üí {y_div_krw_fee:,.0f}Ïõê**")
            curr_yield = (annual_div_usd / price_usd) * 100
            st.metric("Î∞∞ÎãπÏàòÏùµÎ•†(Ïó∞, %)", f"{curr_yield:.2f}%")
        else:
            st.info("Î∞∞Îãπ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ ÏàòÏùµÎ•† ÌëúÏãúÎ•º ÏÉùÎûµÌï©ÎãàÎã§. (ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú ÏõîÎ∞∞Îãπ ÏûÖÎ†• Í∞ÄÎä•)")
            if monthly_div_usd_auto is None and monthly_div_override == 0:
                with st.expander("‚ÑπÔ∏è Î∞∞Îãπ Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÎäî Ïù¥Ïú† Î≥¥Í∏∞", expanded=False):
                    st.write("yfinanceÏóêÏÑú Î∞∞ÎãπÏùÑ Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
                    st.code(str(div_source or "no reason"), language="text")
                    st.write("ÏÇ¨Ïù¥ÎìúÎ∞îÏùò ‚ÄòÏõîÎ∞∞Îãπ (USD/Ï£º)‚Äô Í∞íÏùÑ ÏûÖÎ†•ÌïòÎ©¥ Î∞îÎ°ú Í≥ÑÏÇ∞Îê©ÎãàÎã§.")
    else:
        st.info("Í∞ÄÍ≤© Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ÏÑú Î∞∞Îãπ ÌôòÏÇ∞ÏùÑ ÏÉùÎûµÌñàÏäµÎãàÎã§.")

with c3:
    if price_usd:
        fee_round = (mirae_us_fee/100.0) * (2 if apply_fees else 0)
        net_cost_krw = base_amt_krw * (1 + fee_round)
        st.write("**ÏõêÍ∏à¬∑ÏàòÏàòÎ£å(Ï∞∏Í≥†)**")
        st.write(f"- Í∏∞Ï§Ä Í∏àÏï°: **{base_amt_krw:,.0f}Ïõê**")
        st.write(f"- ÏàòÏàòÎ£å {'Ï†ÅÏö©' if apply_fees else 'ÎØ∏Ï†ÅÏö©'} ÏôïÎ≥µ Í∞ÄÏ†ï ÏõêÍ∏à: **{net_cost_krw:,.0f}Ïõê**")
    else:
        st.write("‚Äî")

st.caption("Î∞∞Îãπ/ÌôòÏú®/ÏàòÏàòÎ£åÎäî ÏãúÏ†ê¬∑Ïù¥Î≤§Ìä∏Ïóê Îî∞Îùº Î≥ÄÎèô. Ïã§Ï†ú Ï£ºÎ¨∏ ÌôîÎ©¥Ïùò Í∞íÏù¥ Ïö∞ÏÑ†Ìï©ÎãàÎã§. (ÏÑ∏Í∏àÏùÄ Î≥ÑÎèÑ)")

# ---------------------------
# 2) (Finlife API) Ïòà¬∑Ï†ÅÍ∏à ÏÉÅÏúÑ 5 + Ïó∞Ïù¥Ïûê(KRW, Îã®Î¶¨)
# ---------------------------
st.header("2) (Finlife) Ïòà¬∑Ï†ÅÍ∏à ÏÉÅÏúÑ 5 + Ïó∞Ïù¥Ïûê(KRW, Îã®Î¶¨)")

if not finlife_key:
    st.warning("Finlife API KeyÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏÇ¨Ïù¥ÎìúÎ∞îÏóê ÌÇ§Î•º ÏûÖÎ†•ÌïòÎ©¥ Ïã§ÏãúÍ∞Ñ Ïòà¬∑Ï†ÅÍ∏à Í∏àÎ¶¨Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.")

deposit_df = finlife_top5_deposit(finlife_key) if finlife_key else pd.DataFrame()
# Ï†ÅÍ∏à: Í∏∞Î≥∏ Top1 + Ïö∞ÎåÄ Top1 + Ï¢ÖÌï© Top3 (Ï§ëÎ≥µ Ï†úÏô∏) + Í∞Å Ìï≠Î™© Í∏∞Ï§ÄÍ∏àÎ¶¨Î°ú Ïó∞Ïù¥Ïûê Í≥ÑÏÇ∞
saving_show  = finlife_saving_top5_mixed(finlife_key, base_amt_krw) if finlife_key else pd.DataFrame()

# ÏòàÍ∏àÏùÄ Í∏∞Ï°¥Ï≤òÎüº Í∏∞Î≥∏Í∏àÎ¶¨ Í∏∞Ï§Ä Top5 + Ïó∞Ïù¥Ïûê(Îã®Î¶¨)
deposit_show = add_simple_interest_krw(deposit_df, base_amt_krw, "Í∏∞Î≥∏Í∏àÎ¶¨(%)") if not deposit_df.empty else deposit_df

colA, colB = st.columns(2)
with colA:
    st.subheader("ÏòàÍ∏à Top 5 (ÏùÄÌñâ¬∑Îã®Î¶¨¬∑12Í∞úÏõî / Ï†ïÎ†¨: Í∏∞Î≥∏Í∏àÎ¶¨)")
    if deposit_show.empty:
        st.info("ÏòàÍ∏à Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§. (API ÌÇ§, ÎÑ§Ìä∏ÏõåÌÅ¨, ÌòπÏùÄ Ï°∞Í±¥Ïóê ÎßûÎäî ÏòµÏÖò ÎØ∏Ï°¥Ïû¨ Í∞ÄÎä•ÏÑ±)")
    st.dataframe(deposit_show, use_container_width=True, hide_index=True)

with colB:
    st.subheader("Ï†ÅÍ∏à Top 5 (Í∏∞Î≥∏ Top1 ¬∑ Ïö∞ÎåÄ Top1 ¬∑ Ï¢ÖÌï© Top3, Ïó∞Ïù¥Ïûê Ìè¨Ìï®)")
    if saving_show.empty:
        st.info("Ï†ÅÍ∏à Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§. (API ÌÇ§, ÎÑ§Ìä∏ÏõåÌÅ¨, ÌòπÏùÄ Ï°∞Í±¥Ïóê ÎßûÎäî ÏòµÏÖò ÎØ∏Ï°¥Ïû¨ Í∞ÄÎä•ÏÑ±)")
    st.dataframe(saving_show, use_container_width=True, hide_index=True)

st.caption("Ï∂úÏ≤ò: Í∏àÏúµÍ∞êÎèÖÏõê ‚ÄòÍ∏àÏúµÏÉÅÌíà ÌïúÎààÏóê‚Äô Ïò§ÌîàAPI. Í∏àÎ¶¨Îäî ÏÑ∏Ï†ÑÏù¥Î©∞, Ïã§Ï†ú Í∞ÄÏûÖÏ°∞Í±¥/Ïö∞ÎåÄÍ∏àÎ¶¨/Í∏∞Í∞ÑÏóê Îî∞Îùº Îã¨ÎùºÏßà Ïàò ÏûàÏäµÎãàÎã§.")

# ---------------------------
# 3) ÏóÖÎπÑÌä∏ BTC¬∑ETH Î≥ÄÎèôÎ•† (1¬∑3¬∑5¬∑7Ïùº)
# ---------------------------
st.header("3) ÏóÖÎπÑÌä∏ BTC¬∑ETH Î≥ÄÎèôÎ•† (1¬∑3¬∑5¬∑7Ïùº)")
tabs = st.tabs(["BTC", "ETH"])
for market, tab in zip(["KRW-BTC","KRW-ETH"], tabs):
    with tab:
        df = get_upbit_daily(market, count=8)
        if df.empty:
            st.error("ÏóÖÎπÑÌä∏ ÏùºÎ≥Ñ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
            continue
        c1, c2 = st.columns([1,1])
        with c1:
            st.line_chart(df.set_index("date")["close"])
        with c2:
            c_1 = pct_change_over(df, 1)
            c_3 = pct_change_over(df, 3)
            c_5 = pct_change_over(df, 5)
            c_7 = pct_change_over(df, 7)
            fmt = lambda v: ("+" if v is not None and v>=0 else "") + (f"{v:.2f}%" if v is not None else "N/A")
            st.metric("1Ïùº Î≥ÄÌôî", fmt(c_1))
            st.metric("3Ïùº Î≥ÄÌôî", fmt(c_3))
            st.metric("5Ïùº Î≥ÄÌôî", fmt(c_5))
            st.metric("7Ïùº Î≥ÄÌôî", fmt(c_7))

        st.subheader("ÏàòÏàòÎ£å Ï†ÅÏö© ÎπÑÍµê (ÏòàÏãú Ï≤¥Í≤∞)")
        latest = df["close"].iloc[-1]
        fee = (upbit_fee_spot/100.0) if apply_fees else 0.0
        qty_no_fee = base_amt_krw / latest
        qty_fee    = (base_amt_krw * (1 - fee)) / latest
        gross_exit = qty_no_fee * latest
        net_exit_fee = qty_fee * latest * (1 - fee)
        st.write(f"- ÌòÑÏû¨Í∞Ä: **{latest:,.0f} KRW**")
        st.write(f"- ÏàòÏàòÎ£å ÎØ∏Ï†ÅÏö© Îß§Ïàò ÏàòÎüâ: **{qty_no_fee:.8f}**")
        st.write(f"- ÏàòÏàòÎ£å Ï†ÅÏö© Îß§Ïàò ÏàòÎüâ: **{qty_fee:.8f}** (Îß§Ïàò {upbit_fee_spot:.3f}%)")
        st.write(f"- ÎèôÍ∞Ä Îß§ÎèÑ Í∞ÄÏ†ï ÏôïÎ≥µ ÏàòÏàòÎ£å Ìö®Í≥º: **{gross_exit - net_exit_fee:,.0f} KRW**")

st.caption("ÏóÖÎπÑÌä∏ ÏàòÏàòÎ£å ÏòàÏãú: KRWÎßàÏºì ÏùºÎ∞ò 0.05%, ÏòàÏïΩ 0.139% (Î∂ÄÍ∞ÄÏÑ∏ Ìè¨Ìï®, Ïù¥Î≤§Ìä∏ Î≥ÄÎèô Í∞ÄÎä•). Ï∂úÍ∏à ÏàòÏàòÎ£å Î≥ÑÎèÑ.")

# ---------------------------
# 4) ÌÜµÌï© ÎπÑÍµê ÏöîÏïΩ (Î¶¨ÏñºÌã∞Ïù∏Ïª¥ KRW Î∞∞Îãπ Ìè¨Ìï®)
# ---------------------------
st.header("4) ÌÜµÌï© ÎπÑÍµê ÏöîÏïΩ")
s1, s2, s3 = st.columns(3)

with s1:
    st.subheader("Î¶¨ÏñºÌã∞Ïù∏Ïª¥")
    if price_usd:
        show_price = price_usd * (usdkrw if apply_fx else 1.0)
        st.write(f"- Ï¢ÖÍ∞Ä: **{'$'+format(price_usd, ',.2f') if not apply_fx else format(show_price, ',.0f')+'Ïõê'}**")
        if 'monthly_div_usd' in locals():
            annual_div_usd = monthly_div_usd * 12
        else:
            annual_div_usd = 0.0
        if 'monthly_div_usd' in locals() and monthly_div_usd > 0:
            buy_fee = (mirae_us_fee/100.0) if apply_fees else 0.0
            usd_budget = (base_amt_krw / (usdkrw if apply_fx else 1.0))
            shares_fee = usd_budget * (1 - buy_fee) / price_usd
            m_div_usd_fee = shares_fee * monthly_div_usd
            y_div_usd_fee = m_div_usd_fee * 12
            fx = (usdkrw if apply_fx else 1.0)
            m_div_krw_fee = m_div_usd_fee * fx
            y_div_krw_fee = y_div_usd_fee * fx
            st.write(f"- ÏõîÎ∞∞Îãπ(ÏàòÏàòÎ£å Ï†ÅÏö©): **${m_div_usd_fee:,.2f} ‚Üí {m_div_krw_fee:,.0f}Ïõê**")
            st.write(f"- Ïó∞Î∞∞Îãπ(ÏàòÏàòÎ£å Ï†ÅÏö©): **${y_div_usd_fee:,.2f} ‚Üí {y_div_krw_fee:,.0f}Ïõê**")
            st.write(f"- Î∞∞ÎãπÏàòÏùµÎ•†(Ïó∞/Ï£ºÎãπ): **{(annual_div_usd/price_usd*100):.2f}%**")
        else:
            st.write("- Î∞∞Îãπ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå(ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú ÏõîÎ∞∞Îãπ ÏûÖÎ†• Í∞ÄÎä•)")
        st.write(f"- ÎØ∏ÎûòÏóêÏÖã Îß§Ïàò ÏàòÏàòÎ£å(Ìïú Î∞©Ìñ•): **{mirae_us_fee:.2f}%**")
    else:
        st.write("‚Äî")

with s2:
    st.subheader("ÏòàÍ∏à Top 5 (Ïó∞Ïù¥Ïûê KRW Ìè¨Ìï®)")
    st.dataframe(deposit_show if not deposit_show.empty else pd.DataFrame(), use_container_width=True, hide_index=True)

with s3:
    st.subheader("Ï†ÅÍ∏à Top 5 (Í∏∞Î≥∏ Top1 ¬∑ Ïö∞ÎåÄ Top1 ¬∑ Ï¢ÖÌï© Top3, Ïó∞Ïù¥Ïûê Ìè¨Ìï®)")
    st.dataframe(saving_show if not saving_show.empty else pd.DataFrame(), use_container_width=True, hide_index=True)

st.markdown("---")
st.markdown(
"""
**Î©îÎ™®**  
- ÏòàÍ∏à: Ï†ú1Í∏àÏúµÍ∂å(topFinGrpNo=020000) / **Îã®Î¶¨(S)** / **12Í∞úÏõî** ÏòµÏÖòÎßå ÌïÑÌÑ∞ÌïòÍ≥†, **Í∏∞Î≥∏Í∏àÎ¶¨(%)** Í∏∞Ï§ÄÏúºÎ°ú Ï†ïÎ†¨Ìï©ÎãàÎã§.  
- Ï†ÅÍ∏à: Ï†ú1Í∏àÏúµÍ∂å / **ÏûêÏú†Ï†ÅÎ¶ΩÏãù(F)** / **Îã®Î¶¨(S)** / **12Í∞úÏõî** ÏòµÏÖòÏóêÏÑú  
  **Í∏∞Î≥∏Í∏àÎ¶¨ Top1 + ÏµúÍ≥†Ïö∞ÎåÄ Top1 + Ï¢ÖÌï©(ÌèâÍ∑†) Top3**(Ï§ëÎ≥µ Ï†úÏô∏)Î°ú Íµ¨ÏÑ±ÌïòÍ≥†,  
  Í∞Å Ìï≠Î™©Ïùò **Í∏∞Ï§ÄÍ∏àÎ¶¨(%)**Î°ú `Ïó∞Ïù¥Ïûê(Ïõê, Îã®Î¶¨)`Î•º Í≥ÑÏÇ∞Ìï¥ ÌëúÏãúÌï©ÎãàÎã§.  
- Î¶¨ÏñºÌã∞Ïù∏Ïª¥ Í∞ÄÍ≤©ÏùÄ yfinance Ïã§Ìå® Ïãú StooqÎ°ú Ìè¥Î∞±Ìï©ÎãàÎã§. Î∞∞ÎãπÏùÄ ÌïÑÏöî Ïãú ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú ÏõîÎ∞∞Îãπ(USD/Ï£º)ÏùÑ ÏàòÎèô ÏûÖÎ†•Ìï¥ Í≥ÑÏÇ∞Ìï† Ïàò ÏûàÏäµÎãàÎã§.  
"""
)
